package handshake

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *_Hello1_Payload) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, (z.Versions)[:])
	o, err = z.SecLevel.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SecLevel")
		return
	}
	o, err = z.AuthLevel.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "AuthLevel")
		return
	}
	o = msgp.AppendBool(o, z.FirstTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *_Hello1_Payload) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = msgp.ReadExactBytes(bts, (z.Versions)[:])
	if err != nil {
		err = msgp.WrapError(err, "Versions")
		return
	}
	bts, err = z.SecLevel.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "SecLevel")
		return
	}
	bts, err = z.AuthLevel.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "AuthLevel")
		return
	}
	z.FirstTime, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FirstTime")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *_Hello1_Payload) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize + (4 * (msgp.ByteSize)) + z.SecLevel.Msgsize() + z.AuthLevel.Msgsize() + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z _Resp1_Payload) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendByte(o, byte(z.ChosenVersion))
	o = msgp.AppendBool(o, z.UseEncryption)
	o = msgp.AppendBool(o, z.UseAuth)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *_Resp1_Payload) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	{
		var zb0002 byte
		zb0002, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ChosenVersion")
			return
		}
		z.ChosenVersion = _Version(zb0002)
	}
	z.UseEncryption, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "UseEncryption")
		return
	}
	z.UseAuth, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "UseAuth")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z _Resp1_Payload) Msgsize() (s int) {
	s = 1 + msgp.ByteSize + msgp.BoolSize + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z _Version) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *_Version) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = _Version(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z _Version) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
